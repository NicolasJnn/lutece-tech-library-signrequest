<document> 
<properties> 
    <title> SignRequest Library</title> 
</properties> 
     <body> 
         <section name="Library SignRequest"> 
            <subsection name="Introduction"> 
            <p>
                    The purpose of this library is to provide a number of tools and interfaces
                    to send HTTP requests with digital signatures to ensure
                    a certain level of security.
            </p> 
            </subsection> 
            <subsection name="Sécurité provided by a signature"> 
                <p>
                    The security provided by a signature associated OF a HTTP request is very useful
                    in the context of REST webservice where there is no concept of session (stateless mode - without state).
                </p>
                <p>
                    The principle of the signature is to achieve a client-side condensate (hash) of a certain element
                    the query variables (parameters), a timestamp (to limit the validity of the signature in time)
                    and a secret key (known as client and server).
                    This condensate is obtained using a hash algorithm (SHA-1, SHA-256, ...) and is
                    actual signature of the query. It comes in the form of a string
                    representing a number in hexadecimal.
                </p>
                <p>
                    The signature is transmitted to the server, which will restore a condensate on its side with its secret key.
                    If the signature is properly restored, the request is valid, otherwise she refused with a 401 HTTP status code.
                <p>
                </p>
                    This is what brings the signature in terms of safety:
                    <ul>
                        <li>
                            An HTTP request or a WebService call can be executed by a
                            customer who does not have the secret key
                        </li>
                        <li>
                            If the Timestamp option control is enabled, the request has a life
                            limited in time. It is not possible to replay the request within that period.
                        </li>
                        <li>
                            Validate the integrity of parameters passed (if they are part of the signature).
                        </li>
                    </ul> 
                 </p>
                 <p>
                    Here's what the signature does not in terms of safety:
                 </p>
                 <p>
                    <ul>   
                        <li>
                            The confidentiality of data transmitted. This can be achieved
                            by encrypting the transmission with HTTPS
                        </li>
                        <li>
                            The ability to replay exactementla same query in a limited time.
                        </li>
                        <li>
                            The simple signature is not related to a user thus does not allow
                            management of access rights. To validate a signature by user, it is
                            necessary to rely on a server identity (Identity Provider)
                            using protocols like OAuth.
                        </li>
                     </ul>
                </p>
                <p>
                    In summary, the security offered by the signature mechanism corresponds to
                    operation without a need for session typically REST Webservices.
                    It is well suited for securing between two servers where requests from
                    a very small population of users (confidentiality of the shared secret) or
                    without access to the secret key.
                </p>
                <p>
                    To ensure data privacy, data transfer must be
                    achieved by HTTPS.
                </p> 
            </subsection> 
        </section> 
        <section name="Outils provided by SignRequest"> 
            <subsection name="API RequestAuthenticator"> 
                    <p>
                         API <code> RequestAuthenticator </code>: defines a
                         Authenticator HTTP request.
                    </p>
                    <p>
                         The same component can be used client side to sign a petition and
                         server side to validate authentication.
                         Here is the interface and two methods to implement:
                    </p> 
                    <p>
                        <div class="code">
                            <pre>
    / **
     * Check the Authentication of a request
     * @ Param request The HTTP request
     * @ Return true if authenticated, false Otherwise
     * /
    boolean <strong> isRequestAuthenticated </strong> (HttpServletRequest request);

    / **
     * Authenticate a request
     * @ Param method The HTTP method to authenticate
     * @ Param elements List of elements to include in the signature
     * /
    <strong> AuthenticateRequest void </strong> (HttpMethodBase method, &lt;String&gt; List elements);
                        
</pre> </div> </p>
                <p>
                    This interface offers many implementations.
                    A good practice is to inject a Spring context via the implementation
                    desired. <br/>
                    The library offers several implementations SignRequest:
                </p>
                <p>
                    <ul>
                        <li> NoSecurityAuthenticator: no authentication control </li> 
                        <li>HeaderHashAuthenticator: Signature passed in a header of the HTTP request </li> 
                        <li>RequestHashAuthenticator: Signature spent in a header of the HTTP request </li> 
                    </ul> 
                </p> 
            </subsection> 
            <subsection name="RequestHashAuthenticator and HeaderHashAuthenticator"> 
                <p>
                    These authenticators must be configured using several parameters:
                </p>
                <p>
                    <ul>
                        <li> service hash. The library provides an API SignRequest
                                HashService and an implementation using the SHA-1. </li> 
                        <li>the private key corresponding to the shared secret between client and server </li>
                        <li>list of query parameters that are used to compose the signature </li> 
                        <li>the validity of the signature in seconds. The value 0 indicates that the duration is not controlled. </li> 
                    </ul> 
               </p> 
               <h4> Configuring a RequestAuthenticator in the REST plugin </h4> 
                    <p> Securing all requests can be made at the REST plugin
                        by injecting a Spring context via the authenticator. 
                    </p>
                    <p>
                        By default the plugin uses REST implementation <code> NoSecurityRequestAuthenticator </code>
                        which allows all queries. The example below shows a configuration
                        HeaderHashRequestAuthenticator using the setup and specific.
                    </p>

    &lt;bean id="rest.hashService" class="fr.paris.lutece.util.signrequest.security.Sha1HashService" /&gt;
   &lt;bean id="rest.requestAuthenticator" class="fr.paris.lutece.util.signrequest.HeaderHashAuthenticator" &gt;
       &lt;property name="hashService" ref="rest.hashService" /&gt;
       &lt;property name="signatureElements" &gt; 
           &lt;list&gt;
               &lt;value&gt;key&lt;/value&gt;
           &lt;/list&gt;
       &lt;/property&gt;
       &lt;property name="privateKey"&gt;
           &lt;value&gt;change me&lt;/value&gt;
       &lt;/property&gt;
       &lt;property name="validityTimePeriod"&gt;
           &lt;value&gt;0&lt;/value&gt;
       &lt;/property&gt;
   &lt;/bean&gt;
                </subsection>
            </section>
            <section name="API HashService">
            <p>
                Cette API propose une fonction de hachage 
            </p>    
            <p>
                Voici l'interface
            </p>
<p>
    <div class="code">
        <pre>
    /**
     * Create a Hash string from a given source
     * @param strSource The source
     * @return The Hash
     */
    String getHash( String strSource );
        
        </pre>
    </div>
    </p>
        
            <p>
                The library offers SignRequest implementing SHA-1.
            </p>
        </section>
        <section name="Servlet Filters">
            <p>
                The library also offers SignRequest Servlet filters
                that can be used by plugins in order to validate
                queries on the server side. <br />
                They are based on authenticators provided with the library.
                <br/>
                An example of a filter added to the XML file of a plugin:
            </p>    
            <p>
            <div class="code">
        <pre>
&lt;filters&gt;
       &lt;filter&gt;
           &lt;filter-name&gt;myresourcesecurity&lt;/filter-name&gt;
           &lt;url-pattern&gt;/rest/myresource/*&lt;/url-pattern&gt;
           &lt;filter-class&gt;fr.paris.lutece.util.signrequest.servlet.HeaderHashRequestFilter&lt;/filter-class&gt;

           &lt;init-param&gt;
               &lt;param-name&gt;elementsSignature&lt;/param-name&gt;
               &lt;param-value&gt;id-resource,name,description&lt;/param-value&gt;
           &lt;/init-param&gt;

           &lt;init-param&gt;
               &lt;param-name&gt;validityTimePeriod&lt;/param-name&gt;
               &lt;param-value&gt;0&lt;/param-value&gt;
           &lt;/init-param&gt;

           &lt;init-param&gt;
               &lt;param-name&gt;privateKey&lt;/param-name&gt;
               &lt;param-value&gt;change me&lt;/param-value&gt;
           &lt;/init-param&gt;
       &lt;/filter&gt;
   &lt;/filters&gt;
        </pre>
    </div>
</p>
   </section>
      
        </body>
</document>  